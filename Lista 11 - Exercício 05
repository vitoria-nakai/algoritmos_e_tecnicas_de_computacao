/*
Faça um menu interativo que leia o menu no menu.txt e imprima o boleto
de um pedido de lanchonete num boleto.txt .
*/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_NOME_ITEM 50
#define MAX_LINE_BUFFER (MAX_NOME_ITEM + 20)

int main() {
    FILE *arquivo = fopen("menu.txt", "r");

    if (arquivo == NULL) {
        printf("Erro ao abrir o arquivo menu.\n");
        return 1;
    }

    int qtd;
    if (fscanf(arquivo, "%d", &qtd) != 1) {
        printf("Erro ao ler a quantidade de itens do menu.\n");
        fclose(arquivo);
        return 1;
    }

    fgetc(arquivo);

    char **itens = NULL;
    double *precos = NULL;

    itens = (char**)malloc(qtd * sizeof(char*));
    precos = (double*)malloc(qtd * sizeof(double));

    if (itens == NULL) {
        printf("Erro ao alocar memória para os nomes dos itens.\n");
        if (precos != NULL) free(precos);
        fclose(arquivo);
        return 1;
    }
    if (precos == NULL) {
        printf("Erro ao alocar memória para os preços dos itens.\n");
        free(itens);
        fclose(arquivo);
        return 1;
    }

    char temp_line_buffer[MAX_LINE_BUFFER];
    char item_name_temp[MAX_NOME_ITEM];
    double preco_lido;

    for (int i = 0; i < qtd; i++) {
        if (fgets(temp_line_buffer, sizeof(temp_line_buffer), arquivo) == NULL) {
            printf("Erro ao ler item %d do arquivo 'menu.txt' ou fim inesperado do arquivo.\n", i);
            for (int j = 0; j < i; j++) free(itens[j]);
            free(itens);
            free(precos);
            fclose(arquivo);
            return 1;
        }

        temp_line_buffer[strcspn(temp_line_buffer, "\n")] = 0;

        if (sscanf(temp_line_buffer, "%s %lf", item_name_temp, &preco_lido) != 2) {
            printf("Erro de formato ao parsear item %d da linha: '%s'. Verifique o arquivo (nome e preco).\n", i, temp_line_buffer);
            for (int j = 0; j < i; j++) free(itens[j]);
            free(itens);
            free(precos);
            fclose(arquivo);
            return 1;
        }

        itens[i] = (char*)malloc(strlen(item_name_temp) + 1);
        if (itens[i] == NULL) {
            printf("Erro ao alocar memória para o nome do item %d ('%s').\n", i, item_name_temp);
            for (int j = 0; j < i; j++) free(itens[j]);
            free(itens);
            free(precos);
            fclose(arquivo);
            return 1;
        }
        strcpy(itens[i], item_name_temp);

        precos[i] = preco_lido;
    }

    if (fclose(arquivo) == EOF) {
        printf("Erro ao fechar arquivo 'menu.txt'.\n");
        for (int i = 0; i < qtd; i++) {
            if (itens[i] != NULL) free(itens[i]);
        }
        free(itens);
        free(precos);
        return 1;
    }

    FILE *boleto = fopen("boleto.txt", "w");
    if (boleto == NULL) {
        printf("Erro ao criar arquivo 'boleto.txt'.\n");
        for (int i = 0; i < qtd; i++) {
            if (itens[i] != NULL) free(itens[i]);
        }
        free(itens);
        free(precos);
        return 1;
    }
    fprintf(boleto, "--- Lista de Pedidos ---\n\n");

    int pedido;
    double soma = 0;

    do {
        printf("\n--- MENU INTERATIVO ---\n");
        printf("Digite o numero correspondente do pedido para adicionar a lista de compras.\n\n");
        for (int i = 0; i < qtd; i++) {
            printf("%d. %s -> %.2lf\n", i, itens[i], precos[i]);
        }
        printf("-1. Finalizar o pedido.\n");
        printf("Digite o pedido: ");

        if (scanf("%d", &pedido) != 1) {
            printf("Entrada invalida. Por favor, digite um numero inteiro.\n");
            while (getchar() != '\n' && getchar() != EOF);
            pedido = -2;
            continue;
        }
        while (getchar() != '\n' && getchar() != EOF);

        if (pedido >= 0 && pedido < qtd) {
            fprintf(boleto, "%s -> %.2lf\n", itens[pedido], precos[pedido]);
            soma = soma + precos[pedido];
            printf("'%s' adicionado ao pedido.\n", itens[pedido]);
        } else if (pedido != -1) {
            printf("Numero de pedido invalido. Por favor, digite um numero entre 0 e %d, ou -1 para finalizar.\n", qtd - 1);
        }
    } while (pedido != -1);

    fprintf(boleto, "\n--------------------------\n");
    fprintf(boleto, "Total: %.2lf\n", soma);

    if (fclose(boleto) == EOF) {
        printf("Erro ao fechar arquivo 'boleto.txt'.\n");
        for (int i = 0; i < qtd; i++) {
            if (itens[i] != NULL) free(itens[i]);
        }
        free(itens);
        free(precos);
        return 1;
    }

    for (int i = 0; i < qtd; i++) {
        if (itens[i] != NULL) free(itens[i]);
    }
    free(itens);
    free(precos);

    printf("\nBoleto gerado com sucesso em 'boleto.txt'.\n");

    return 0;
}
